library("grid", lib.loc="C:/Program Files/R/R-3.3.2/library")
install.packages("gridExtra")
install.packages(C("tidyverse","gridExtra","car","captioner","gvlma"))
install.packages("gvlma")
help.start()
# pacote utiliado para gráficos
library(ggplot2)
# pacote que deixa os gráficos do ggplot lado a lado
# pacotes para manipulação de dados
library(reshape2)
library(dplyr)
library(plyr)
library(gridExtra)
#pacote que possui o conjunto de dados para o primeiro exercício
library(car)
#pacote para fazer legenda
library(captioner)
library(tidyverse)
figs <- captioner(prefix="Figura")
tbls <- captioner(prefix="Tabela")
#inslação dos pacotes necessários
#install.packages(C("tidyverse","gridExtra","car","captioner","gvlma"))
#instalacao de um pacote pra "printar" tabelas mais bonitinhas
#install.packages(
#  'printr',
#  type = 'source',
#  repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
#)
# pacote utiliado para gráficos
library(ggplot2)
# pacote que deixa os gráficos do ggplot lado a lado
# pacotes para manipulação de dados
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
#pacote que possui o conjunto de dados para o primeiro exercício
library(car)
#pacote para fazer legenda
library(captioner)
library(tidyverse)
figs <- captioner(prefix="Figura")
tbls <- captioner(prefix="Tabela")
#inslação dos pacotes necessários
#install.packages(C("tidyverse","gridExtra","car","captioner","gvlma"))
#instalacao de um pacote pra "printar" tabelas mais bonitinhas
#install.packages(
#  'printr',
#  type = 'source',
#  repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
#)
library(ggplot2)
library(gridExtra)
# Programa extraído do site: https://www.ime.usp.br/~giapaula/textoregressao.htm
# Créditos: Prof. Dr. Gilberto Alvarenga Paula
# Adaptado por Caio L. N. Azevedo
# source("C:\\Users\\cnaber\\Trabalho\\windows\\Unicamp\\Disciplinas\\2_semestre_2016\\ME 613\\Programas\\diag2_norm.r")
library(ggplot2)
diag2norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
tam <- 1:length(tsi)
a <- max(tsi)
b <- min(tsi)
g1 = ggplot(data=data.frame(tam,tsi),aes(tam,tsi))+ geom_point() +scale_y_continuous(name = "Resíduo Studentizado",limits=c(b-1,a+1)) +scale_x_continuous(name = "Índice")+labs(title="A")+geom_hline(yintercept=0,size=0.25,linetype=2)+geom_hline(yintercept=2,size=0.25,linetype=2)+geom_hline(yintercept=-2,size=0.25,linetype=2)+theme_light()
g2 =  ggplot(data=data.frame(fitted(fit.model),tsi),aes(fitted(fit.model),tsi))+ geom_point() +scale_y_continuous(name = "Resíduo Studentizado",limits=c(b-1,a+1)) +scale_x_continuous(name = "Valores Ajustados")+labs(title="B")+geom_hline(yintercept=0,size=0.25,linetype=2)+geom_hline(yintercept=2,size=0.25,linetype=2)+geom_hline(yintercept=-2,size=0.25,linetype=2)+theme_light()
#Histograma
g3 = ggplot(data=data.frame(tsi),aes(tsi,col=I("black"),fill=I("white")))+geom_histogram(binwidth = 1,aes(y=..density..))+labs(title="C",x="Resíduo Studentizado",y="Densidade")+theme_light()
#Boxplot
g4 = ggplot(data=data.frame(fac = factor(1),tsi),aes(fac,tsi,col=I("black"),fill=I("white")))+ geom_boxplot(outlier.size = 1.5, outlier.colour = "red",width=0.4)+labs(title="D")+scale_x_discrete(name="")+scale_y_continuous(name = "Residuo Studentizado")+theme(axis.text.x = element_blank())+theme_light()
#funcao que une todos os gráficos
grid.arrange(g1,g2,g3,g4,ncol=2,nrow=2)
#---------------------------------------------------------------#
}
# Programa extraído do site: https://www.ime.usp.br/~giapaula/textoregressao.htm
# Créditos: Prof. Dr. Gilberto Alvarenga Paula
# Adaptado por Caio L. N. Azevedo e Henrique Capatto
envelnorm<-function(fit.model){
# argumento: modelo de regressão linear homocedástico ajustado
# Eu adaptei uma função que achei na net com o que o Caio fez nos grafs de envelope. Agradeçam a um desconhecido.
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
si <- lm.influence(fit.model)$sigma
r <- resid(fit.model)
tsi <- r/(si*sqrt(1-h))
#
ident <- diag(n)
epsilon <- matrix(0,n,100)
e <- matrix(0,n,100)
e1 <- numeric(n)
e2 <- numeric(n)
#
for(i in 1:100){
epsilon[,i] <- rnorm(n,0,1)
e[,i] <- (ident - H)%*%epsilon[,i]
u <- diag(ident - H)
e[,i] <- e[,i]/sqrt(u)
e[,i] <- sort(e[,i]) }
#
for(i in 1:n){
eo <- sort(e[i,])
e1[i] <- (eo[2]+eo[3])/2
e2[i] <- (eo[97]+eo[98])/2 }
y <- quantile(tsi[!is.na(tsi)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = tsi)
ggplot(d, aes(sample = resids))+stat_qq()+stat_qq(aes(sample=e1),geom="line")+stat_qq(aes(sample=e2),geom="line")+ geom_abline(slope = slope, intercept = int,linetype = 3)+labs(x="Percentil da N(0,1)",y="Residuo Studentizado",title="E")+theme_light()
}
# Programa extraído do site: https://www.ime.usp.br/~giapaula/textoregressao.htm
# Créditos: Prof. Dr. Gilberto Alvarenga Paula
# Adaptado por Caio L. N. Azevedo
# source("C:\\Users\\cnaber\\Trabalho\\windows\\Unicamp\\Disciplinas\\2_semestre_2016\\ME 613\\Programas\\anainflu_norm.r")
anainflu_norm<-function(fit.model){
# fit.model: objeto com o ajuste do modelo normal linear homocedástico
# obtido através da função "lm"
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
H <- X%*%solve(t(X)%*%X)%*%t(X)
h <- diag(H)
lms <- summary(fit.model)
s <- lms$sigma
r <- resid(lms)
ts <- r/(s*sqrt(1-h))
di <- (1/p)*(h/(1-h))*(ts^2)
si <- lm.influence(fit.model)$sigma
tsi <- r/(si*sqrt(1-h))
a <- max(tsi)
b <- min(tsi)
par(mfrow=c(1,2))
plot(h,xlab="Índice", ylab="Medida h", pch=16, ylim=c(0,1),cex=1.1,cex.axis=1.1,cex.lab=1.1)
cut <- 2*p/n
abline(cut,0,lty=2)
#identify(h, n=1)
#title(sub="(a)")
#
plot(di,xlab="Índice", ylab="Distância de Cook", pch=16,cex=1.1,cex.axis=1.1,cex.lab=1.1)
#identify(di, n=2)
#
#------------------------------------------------------------#
}
# fit.model: saída do modelo ajustado
# m.C: matriz C relativa às hipóteses de interesse
testeF.CB <- function(fit.model,m.C)
{
v.beta <-  cbind(fit.model$coef) # vetor com a estimativa dos parâmetros
n <- nrow(model.matrix(fit.model)) # número de observações
e.p <- nrow(v.beta) # número de parâmetros
e.q <- nrow(m.C)  # número de linhas da matriz C
m.cov.beta <- (vcov(fit.model)) # matriz de covariâncias dos parâmetros do modelo
# Estatística do Teste
e.F <- t(m.C%*%v.beta)%*%solve(m.C%*%m.cov.beta%*%t(m.C))%*%(m.C%*%v.beta)/e.q
e.pvalor <- 1-pf(e.F,e.q,n-e.p) # p-0valor
cat("Estatistica F = ",round(e.F,2),"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
cat("Matriz C :","\n")
print(m.C)
}
# fit.model: saída do modelo ajustado
# m.C: matriz C relativa às hipóteses de interesse
#m.M : matriz M relativa às hipóteses de interesse
testeF.CBM <- function(fit.model,m.C,m.M)
{
v.beta <-  cbind(fit.model$coef) # vetor com a estimativa dos parâmetros
n <- nrow(model.matrix(fit.model)) # número de observações
e.p <- nrow(v.beta) # número de parâmetros
e.q <- nrow(m.C)  # número de linhas da matriz C
m.cov.beta <- (vcov(fit.model)) # matriz de covariâncias dos parâmetros do modelo
# Estatística do teste
e.F <- t(m.C%*%v.beta-m.M)%*%solve(m.C%*%m.cov.beta%*%t(m.C))%*%(m.C%*%v.beta-m.M)/e.q
e.pvalor <- 1-pf(e.F,e.q,n-e.p) # p-valor
cat("Estatistica F = ",round(e.F,2),"\n")
cat("pvalor = ",round(e.pvalor,4),"\n")
cat("Matriz C :","\n")
print(m.C)
cat("Matriz M :","\n")
print(m.M)
}
#legenda para as tabelas
# legenda para a primeira tabela(estats descr) do primeiro exercício
legenda_table1 = tbls(name="table_estat_descr1",caption = "Estatísticas Descritivas")
legenda_table3 = tbls(name="table_esti_testedenulidade",caption = "Estimativas dos parâmetros, intervalo de confiança e teste de nulidade")
legenda_table2 = tbls(name="table_aic_bic",caption = "Comparação dos modelos")
#legendas para os gráficos
#legenda para o primeiro Boxplot
legenda_graf1 = figs(name="graf1_boxplot",caption = "Boxplot Comparativo")
#legenda para o primeiro grárico de dispersão
legenda_graf2 = figs(name="graf2_dispersao",caption = "Dispersão entre as variáveis Altura e Peso")
legenda_graf3 = figs(name="graf3_dispersao",caption = "Dispersão entre as variáveis Altura e Peso considerando o sexo.")
legenda_graf4 = figs(name="graf4_analiseresidual",caption = "Análise residual para o modelo 1")
legenda_graf5 = figs(name="graf5_envelope",caption = "Gráfico de envelope para o resíduos studentizado para o modelo 1")
legenda_graf6 = figs(name="graf6_analiseresidual",caption = "Análise residual para o modelo 2")
legenda_graf7 = figs(name="graf7_envelope",caption = "Gráfico de envelope para o resíduos studentizado para o modelo 2")
legenda_graf8 = figs(name="graf8_analiseresidual",caption = "Análise residual para o modelo 3")
legenda_graf9 = figs(name="graf9_envelope",caption = "Gráfico de envelope para o resíduos studentizado para o modelo 3")
legenda_graf10 = figs(name="graf10_analiseresidual",caption = "Análise residual para o modelo 4")
legenda_graf11 = figs(name="graf11_envelope",caption = "Gráfico de envelope para o resíduos studentizado para o modelo 4")
legenda_graf12 = figs(name="graf12_Ajuste",caption = "Gráfico de pontos com a reta ajustada pelo modelo 1")
#retirada da observacao 12 e pegando só as variaveis sexo, peso e altura
dados_1 = Davis[-12,1:3]
names(dados_1)=c("Sexo","Peso","Altura")
df <- melt(dados_1,id.vars = 1)
Altf = subset(dados_1,Sexo=="F")
Altm = subset(dados_1,Sexo=="M")
Sexo = c(rep("F",nrow(Altf)),rep("M",nrow(Altm)))
Peso = c(Altf$Peso,Altm$Peso)
Altura = c(Altf$Altura,Altm$Altura)
Alturamf = c(Altf$Altura-mean(Altf$Altura),Altm$Altura-mean(Altm$Altura))
dadosalt = data.frame(Sexo,Peso,Alturamf)
#estatísticas
library(printr)
df <- melt(dados_1,id.vars = 1)
resumo <- ddply(df, c("Sexo","variable"), function(x) summary(x$value))
dp = ddply(df, c("Sexo","variable"), function(x) sd(x$value))
estat_descr = data.frame(resumo,dp[,3])
names(estat_descr)=c("Sexo","Variável","Minímo","1ºQuartil","Mediana","Média","3ºQuartil","Máximo","Erro Padrão")
estat_descr
#gráficos
# boxplot sexo x peso
graf1 = ggplot(dados_1, aes(Sexo,Peso,fill=Sexo))
graf1 = graf1+geom_boxplot()+labs(title = "Boxplot: Sexo x Peso" , x = "Sexo", y="Peso")+theme_light()
# boxplot sexo x altura
graf2 = ggplot(dados_1, aes(Sexo,Altura,fill=Sexo))
graf2 = graf2 + geom_boxplot()+labs(title = "Boxplot: Sexo x Altura" , x = "Sexo", y="Altura")+theme_light()
grid.arrange(graf1, graf2, nrow=1, ncol=2)
# Dispersão entre Altura e Peso (Desconsiderando o sexo)
ggplot(dados_1, aes(Altura,Peso))+geom_point()+labs(title = "Dispersão entre as variáveis Altura e Peso" , x = "Altura", y="Peso")+theme(plot.title = element_text(hjust = 0.5))+theme_light()
# Dispersão entre Altura e Peso (feminino)
graf4= ggplot(Altf, aes(Altura,Peso))
graf4=graf4+geom_point()+labs(title = "Sexo Feminino" , x = "Altura", y="Peso")+theme(plot.title = element_text(hjust = 0.5))+theme_light()
# Dispersão entre Altura e Peso (masculino)
graf5 = ggplot(Altm, aes(Altura,Peso))
graf5 = graf5+geom_point()+labs(title = "Sexo Masculino" , x = "Altura", y="Peso")+theme(plot.title = element_text(hjust = 0.5))+theme_light()
grid.arrange(graf4, graf5, nrow=1, ncol=2)
#análise para o modelo 1
fit_1 = lm(Peso~-1+Sexo+(Alturamf:Sexo))
resumo_fit_1 = summary(fit_1)
coeff_fit_1 = resumo_fit_1$coefficients
coeff_fit_1 = data.frame(round(as.double(coeff_fit_1[,1]),4),round(as.double(coeff_fit_1[,2]),4),round(as.double(coeff_fit_1[,3]),4),ifelse(as.double(coeff_fit_1[,4]) < 0.0001, "<0.0001", round(as.double(coeff_fit_1[,4]),4)))
names(coeff_fit_1)=c("Estimativa","EP","Valor T","Valor p")
# Estatísticas para comparação de modelos
medidas_modelo_1 = data.frame(rbind(AIC(fit_1),BIC(fit_1),logLik(fit_1)))
colnames(medidas_modelo_1)=c("Modelo 1")
rownames(medidas_modelo_1)=c("AIC","BIC","Log-Verossimilhança")
#matriz de planejamento
#View(data.frame(model.matrix(fit_1)))
#step
#step(fit_1,direction="both")
#visualização da tabela
#library(xtable)
#print(xtable(coeff_fit_1))
Alturamf2=Alturamf^2
fit_2 = lm(Peso~-1+Sexo+(Alturamf:Sexo)+(Alturamf2:Sexo))
resumo_fit_2 = summary(fit_2)
coeff_fit_2 = resumo_fit_2$coefficients
coeff_fit_2 = data.frame(round(as.double(coeff_fit_2[,1]),4),round(as.double(coeff_fit_2[,2]),4),round(as.double(coeff_fit_2[,3]),4),ifelse(as.double(coeff_fit_2[,4]) < 0.0001, "<0.0001", round(as.double(coeff_fit_2[,4]),4)))
names(coeff_fit_2)=c("Estimativa","EP","Valor T","Valor p")
# Estatísticas para comparação de modelos
medidas_modelo_2 = data.frame(rbind(AIC(fit_2),BIC(fit_2),logLik(fit_2)))
colnames(medidas_modelo_2)=c("Modelo 2")
rownames(medidas_modelo_2)=c("AIC","BIC","Log-Verossimilhança")
#matriz de planejamento
#View(data.frame(model.matrix(fit_1)))
#step
#step(fit_1,direction="both")
#library(xtable)
#print(xtable(coeff_fit_2))
#analise para o modelo 3
fit_3 = lm(Peso~-1+(Altura:Sexo),data=dados_1)
resumo_fit_3 = summary(fit_3)
coeff_fit_3 = resumo_fit_3$coefficients
coeff_fit_3 = data.frame(round(as.double(coeff_fit_3[,1]),4),round(as.double(coeff_fit_3[,2]),4),round(as.double(coeff_fit_3[,3]),4),ifelse(as.double(coeff_fit_3[,4]) < 0.0001, "<0.0001", round(as.double(coeff_fit_3[,4]),4)))
names(coeff_fit_3)=c("Estimativa","EP","Valor T","Valor p")
# Estatísticas para comparação de modelos
medidas_modelo_3 = data.frame(rbind(AIC(fit_3),BIC(fit_3),logLik(fit_3)))
colnames(medidas_modelo_3)=c("Modelo 3")
rownames(medidas_modelo_3)=c("AIC","BIC","Log-Verossimilhança")
#matriz de planejamento
#View(data.frame(model.matrix(fit_1)))
#step
#step(fit_1,direction="both")
#library(xtable)
#print(xtable(coeff_fit_3))
#analises para o modelo 4
alt2 = dados_1$Altura^2
fit_4 = lm(Peso~-1+(Altura:Sexo)+(alt2:Sexo),data=dados_1)
resumo_fit_4 = summary(fit_4)
coeff_fit_4 = resumo_fit_4$coefficients
coeff_fit_4 = data.frame(round(as.double(coeff_fit_4[,1]),4),round(as.double(coeff_fit_4[,2]),4),round(as.double(coeff_fit_4[,3]),4),ifelse(as.double(coeff_fit_4[,4]) < 0.0001, "<0.0001", round(as.double(coeff_fit_4[,4]),4)))
names(coeff_fit_4)=c("Estimativa","EP","Valor T","Valor p")
# Estatísticas para comparação de modelos
medidas_modelo_4 = data.frame(rbind(AIC(fit_4),BIC(fit_4),logLik(fit_4)))
colnames(medidas_modelo_4)=c("Modelo 4")
rownames(medidas_modelo_4)=c("AIC","BIC","Log-Verossimilhança")
#matriz de planejamento
#View(data.frame(model.matrix(fit_1)))
#library(xtable)
#print(xtable(coeff_fit_4))
#Análise de resíduos para o modelo 1
library(ggplot2)
diag2norm(fit_1)
#gráfico de envelopes do modelo 1
envelnorm(fit_1)
##Análise de resíduos para o modelo 2
diag2norm(fit_2)
#gráfico de envelopes do modelo 2
envelnorm(fit_2)
#Análise de resíduos para o modelo 3
diag2norm(fit_3)
#gráfico de envelopes do modelo 3
envelnorm(fit_3)
##Análise de resíduos para o modelo 4
diag2norm(fit_4)
#gráfico de envelopes do modelo 4
envelnorm(fit_4)
tabela_medidas_modelos=cbind(medidas_modelo_1,medidas_modelo_2,medidas_modelo_3,medidas_modelo_4)
#library(xtable)
#print(xtable(tabela_medidas_modelos))
rmodel1=round(summary(fit_1)$r.squared,4)
rmodel2=round(summary(fit_2)$r.squared,4)
rmodel3=round(summary(fit_3)$r.squared,4)
rmodel4=round(summary(fit_4)$r.squared,4)
rqmodel1=round(summary(fit_1)$adj.r.squared,4)
rqmodel2=round(summary(fit_2)$adj.r.squared,4)
rqmodel3=round(summary(fit_3)$adj.r.squared,4)
rqmodel4=round(summary(fit_4)$adj.r.squared,4)
#tabela das estimativas
tabelaestimativas=rbind(coeff_fit_1,coeff_fit_2,coeff_fit_3,coeff_fit_4)
#fazer intervalo de confiança
#library(xtable)
#print(xtable(tabelaestimativas))
library(ggplot2)
gf1=ggplot(data=subset(dadosalt,Sexo=="F"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[1,1],coeff_fit_1[3,1],linetype=1)+theme_light()
gm1=ggplot(data=subset(dadosalt,Sexo=="M"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[2,1],coeff_fit_1[4,1],linetype=1)+theme_light()
gf2= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm2= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
grid.arrange(gf,gm,ncol=2,nrow=1)
library(ggplot2)
gf1=ggplot(data=subset(dadosalt,Sexo=="F"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[1,1],coeff_fit_1[3,1],linetype=1)+theme_light()
gm1=ggplot(data=subset(dadosalt,Sexo=="M"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[2,1],coeff_fit_1[4,1],linetype=1)+theme_light()
gf2= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm2= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
grid.arrange(gf,gm,ncol=2,nrow=1)
library(ggplot2)
gf1=ggplot(data=subset(dadosalt,Sexo=="F"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[1,1],coeff_fit_1[3,1],linetype=1)+theme_light()
gm1=ggplot(data=subset(dadosalt,Sexo=="M"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[2,1],coeff_fit_1[4,1],linetype=1)+theme_light()
gf2= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm2= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
grid.arrange(gf,gm,ncol=2,nrow=1)
library(ggplot2)
gf1=ggplot(data=subset(dadosalt,Sexo=="F"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[1,1],coeff_fit_1[3,1],linetype=1)+theme_light()
gm1=ggplot(data=subset(dadosalt,Sexo=="M"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[2,1],coeff_fit_1[4,1],linetype=1)+theme_light()
gf2= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm2= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
#grid.arrange(gf,gm,ncol=2,nrow=1)
gf3= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm3= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
gf4= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm4= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
grid.arrange(gf,gm,ncol=2,nrow=1)
library(ggplot2)
gf1=ggplot(data=subset(dadosalt,Sexo=="F"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[1,1],coeff_fit_1[3,1],linetype=1)+theme_light()
gm1=ggplot(data=subset(dadosalt,Sexo=="M"),aes(x=Alturamf,y=Peso))+geom_point()+geom_abline(intercept=coeff_fit_1[2,1],coeff_fit_1[4,1],linetype=1)+theme_light()
gf2= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm2= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
#grid.arrange(gf,gm,ncol=2,nrow=1)
gf3= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm3= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
gf4= ggplot(data=Altf,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[1,1],linetype=1)+theme_light()
gm4= ggplot(data=Altm,aes(x=Altura,y=Peso))+geom_point()+geom_abline(intercept = 0,slope=coeff_fit_3[2,1],linetype=1)+theme_light()
#grid.arrange(gf,gm,ncol=2,nrow=1)
grid.arrange(gf1,gm1,gf2,gm2,gf3,gm3,gf4,gm4,ncol=2,nrow=4)
#Análise de resíduos para o modelo 1
library(ggplot2)
diag2norm(fit_1)
